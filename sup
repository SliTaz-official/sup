#!/bin/sh
#
# SliTaz Users Package - Minimal cmdline tools - README for devel info
#
# Copyright (C) 2017 SliTaz GNU/Linux - BSD License
# Author: Christophe Lincoln <pankso@slitaz.org>
#
# Colors: installed 036/36; wok/package 035/35; commands/functions 033/33
#

# Get system wide libsup.sh or development version if working in Hg folder
if [ -f "/usr/lib/slitaz/libsup.sh" ]; then
	. /usr/lib/slitaz/libsup.sh
fi
if [ -f "./libsup.sh" ]; then
	. ./libsup.sh
fi

# Sanity check
if ! [ -d "/home/$(id -un)" ]; then
	gettext "Not a valid user:"; colorize 31 " $(id -un)" && exit 1
fi
mkdir -p ${cache} ${installed}

#
# Functions
#

help() {
	cat << EOT

$(boldify $(gettext "Usage:")) $(basename $0) [command|package] [package]

$(boldify $(gettext "Commands:"))
  -c  cook           $(gettext "Cook a package from the wok")
  -e  extract        $(gettext "Extract a package to current dir")
  -i  install        $(gettext "Install a new package")
  -r  remove         $(gettext "Remove package files")
  -n  new            $(gettext "Create a new package :-)")
  -l  list           $(gettext "List installed packages in your wok")

$(boldify $(gettext "Options:"))
  --init     cook    $(gettext "Initialize sup cook environment")
  --verbose  all     $(gettext "Display more output messages")

$(colorize 33 README)               /usr/share/sup/README
$(colorize 33 Documentation)        http://scn.slitaz.org/?d=en/sup

EOT
	exit 0
}

cook_init() {
	mkdir -p ${wok} ${cooked}
	if [ ! -d "$supcook/wok" ]; then
		ln -s ${wok} ${supcook}/wok
	fi
}

# check_pkg_arg "command"
check_pkg_arg() {
	if [ ! "$pkg" ]; then
		gettext "Missing package name or file path:"
		boldify " sup $1 [package|file.sup]" && exit 1
	fi
}

# new_receip "package"
new_receip() {
	cat > ${wok}/${1}/receip << EOT
# SliTaz User Package receip

PACKAGE="$1"
VERSION=""
SHORT_DESC=""
MAINTAINER=""
LICENSE=""
WEB_SITE=""

# Sup dependencies will be automatically downloaded but system wide 
# deps must be manually installed by root.
SUP_DEPS=""
DEPENDS=""

# Here are the optional install rules (download, configure, etc)
sup_install() {
	echo ""
}

EOT
}

#
# Commands
#

case "$1" in

	-c|cook)
		# Cook in $cache/cook and mv pkg to a visible dir
		pkg="$2"
		receip="$wok/$pkg/receip"
		cache="$cache/cook"
		
		# Handle --init
		if [ "$init" ]; then
			gettext "Initializing sup cook environment..."
			cook_init
			status && exit 0
		fi
		
		# Sanity check
		check_pkg_arg "$1"
		if [ ! -f "$receip" ]; then
			gettext "Can't find receip in wok for:"
			colorize 31 " $pkg" && exit 1
		fi
		
		newline
		gettext "Building package:"; colorize 36 " $pkg"
		separator
		rm -rf ${cache} && mkdir -p ${cache} ${cooked}
		
		# Check receip
		[ "$verbose" ] && gettext "Checking receip variables..."
		. ${receip}
		for var in PACKAGE VERSION SHORT_DESC MAINTAINER LICENSE WEB_SITE
		do
			value="$(. $receip; eval echo \$$var)"
			case "$var" in
				PACKAGE|VERSION|SHORT_DESC|MAINTAINER|LICENSE)
					if [ ! "$value" ]; then
						gettext "Empty variable:"; colorize 31 " $var=\"\""
						exit 1
					fi ;;
				WEB_SITE)
					if [ ! "$value" ]; then
						gettext "Empty variable:"; colorize 31 " $var=\"\""
						gettext "You can use:"
						boldify " http://scn.slitaz.org/?sup&pkg=$PACKAGE"
						exit 1
					fi ;;
			esac
		done
		[ "$verbose" ] && status
		
		# Set $PACKAGE-$VERSION.sup and copy pkg to cache
		supfile="$PACKAGE-$VERSION.sup"
		cp -rf ${wok}/${pkg} ${cache}/${supfile%.sup}
		cd ${cache}/${supfile%.sup}
		
		# Move to hidden dir: ~/.local and ~/.config
		for dir in local config; do
			mv files/${dir} files/.${dir}
		done
		
		# Add $build_date
		sed -i "/^build_date=/"d receip
		echo "build_date=\"$(date "+%Y-%m-%d %H:%M")\"" >> receip
		
		gettext "Creating compressed archive..."
		find files | cpio -o -H newc --quiet | lzma e files.lzma -si
		rm -rf files
		find . -print | cpio -o -H newc --quiet > ${cooked}/${supfile}
		status
		
		size="$(du -sh $cooked/$supfile | cut -d "	" -f 1)"
		echo "$(gettext 'Packages:') $(colorize 35 $supfile) ($size)"
		rm -rf ${cache} && newline ;;
	
	-n|new)
		pkg="$2"
		if [ ! "$pkg" ]; then
			newline
			gettext "New package name:"; echo -n " "; read pkg
		fi
		newline
		[ ! "$pkg" ] && exit 0
		[ ! -d "$wok" ] && cook_init
		if [ -d "$wok/$pkg" ]; then
			gettext "Package already exists in wok:"; colorize 35 " $pkg"
			newline && exit 0
		fi
		gettext "Creating new package files and tree..."
		mkdir -p ${wok}/${pkg}/files
		new_receip "$pkg"; status
		gettext "Executing your favorite editor..."
		editor ${wok}/${pkg}/receip; status 
		gettext "To cook your package:"; colorize 33 " sup cook $pkg"
		newline ;;
	
	-e|extract)
		# Extract package.sup to current dir
		pkg="$2"
		
		# Sanity check
		check_pkg_arg "$1"
		if [ ! -f "$pkg" ]; then
			gettext "Can't find package file:"; colorize 35 " $pkg" && exit 1
		fi
		
		newline
		gettext "Extract package:"; colorize 36 " $(basename $pkg)"
		separator

		extract_sup "$pkg"
		
		echo "$(gettext 'Packages:') $(colorize 33 $pkg) ($size)"
		newline ;;
		 
	-i|install)
		# Download/extract run install() in $cache/install
		pkg="$2"
		check_pkg_arg "$1"
		
		# Sup pkg in current dir
		if [ -f "$pkg" ]; then
			install_sup "$pkg" && exit 0
		fi
		
		# Sup cooked from wok
		if [ -f "$wok/$pkg/receip" ]; then
			. $wok/$pkg/receip
			if [ -f "$cooked/$PACKAGE-$VERSION.sup" ]; then
				install_sup "$cooked/$PACKAGE-$VERSION.sup" && exit 0
			fi
		fi
		
		# Sup on mirror
		[ ! -f "${pkgsdb}" ] && sup -u
		
		if sqlite3 ${pkgsdb} "SELECT name FROM pkgs WHERE name = '$pkg'" >/dev/null
		then
			vers=$(sqlite3 ${pkgsdb} "SELECT version FROM pkgs WHERE name = '$pkg'")
			mkdir -p ${cache}/wget && cd ${cache}/wget
			# Download
			newline
			download "$pkg" "${mirror}/${pkg}-${vers}.sup"
			install_sup "${pkg}-${vers}.sup"
			rm -rf ${cache}/wget && exit 0
		fi
		gettext "Can't find sup package:"; colorize 31 " $pkg" ;;
	
	-u|update)
		# Update packages
		online=""
		newline
		colorize 33 $(gettext "SUP Update")
		separator
		
		# Skip HTTP/1.1 404 Not Found: 2>/dev/null
		if ! wget -q -T 5 --spider ${mirror}/packages.sql 2>/dev/null; then
			gettext "Mirror is unreachable"; newline
		else
			online=0
		fi
		
		# Newer packages.sql ?
		gettext "Checking packages.sql..."
		db_sum=$(wget -q "${server}?sup=dbsum" -O -)
		if echo "$db_sum  $pkgsdb" | md5sum -s -c -; then
			indent $(($(tty_size) - 13)) "[ $(colorize 36 synced) ]"
		else
			[ "$online" ] && rm -f ${pkgsdb}
			indent $(($(tty_size) - 13)) "[ $(colorize 35 update) ]"
		fi
		
		# No packages.sql: get latest!
		if [ ! -f "$pkgsdb" ] && [ "$online" ]; then
			gettext "Fetching db"; echo -n " â†’ "
			wget -P ${supdb} ${mirror}/packages.sql 2>&1 | tail -n 2 \
				| awk '{printf $3}'; status
			
			timestamp=$(sqlite3 ${pkgsdb} 'SELECT timestamp FROM info' \
				| awk '{printf $1 " " $2}')
			gettext "Database timestamp:"
			indent $(($(tty_size) - 23)) "[ $(boldify $timestamp) ]"
		fi
		
		# Scan installed packages
		count=$(ls $installed | wc -l) in=8
		[ "$count" -gt "10" ] && in=9 && [ "$count" -gt "100" ] && in=10
		gettext "Installed packages:"
		indent $(($(tty_size) - ${in})) "[ $(colorize 33 $count) ]"
		cat << EOT

$(boldify Package $(indent 30 Version) $(indent 52 Status))
--------------------------------------------------------------------------------
EOT
		for pkg in $(ls $installed)
		do
			. ${installed}/${pkg}/receip
			db_sum=$(sqlite3 ${pkgsdb} \
				"SELECT md5sum FROM pkgs WHERE name = '$pkg'")
			
			# MD5sum not matching: new version our new build ?
			if [ "$md5_sum" != "$db_sum" ]; then
				vers=$(sqlite3 ${pkgsdb} \
					"SELECT version FROM pkgs WHERE name = '$pkg'")
				if [ "$VERSION" != "$vers" ]; then
					status="$(gettext "update")"
				else
					status="$(gettext "rebuilt")"
				fi
				echo "$pkg $(indent 30 $VERSION) $(indent 52 $status)"
				echo "$pkg" >> ${cache}/updates
			fi
		done
		
		if [ -f "$cache/updates" ]; then
			count=$(cat $cache/updates | wc -l)
			cat << EOT
--------------------------------------------------------------------------------
EOT
			gettext "Available updates:"; colorize 32 " $count"
			# --install
			if [ "$install" ]; then
				for pkg in $(cat $cache/updates); do
					sup -i ${pkg}
				done
			fi
		else
			gettext "Packages are up-to-date"; echo
			newline
		fi 
		rm -f ${cache}/updates ;;
	
	-r|remove)
		# Remove a package
		pkg="$2"
		check_pkg_arg "$1"
		if [ -d "$installed/$pkg" ]; then
			remove_sup "$pkg"
		else
			gettext "Can't find installed package:"; colorize 31 " $pkg"
			exit 1
		fi ;;
	
	-l|list)
		installed_nb=$(ls ${installed} | wc -l)
		newline
		echo -n "$(colorize 36 $(gettext 'Installed sup packages:'))"
		boldify " $installed_nb"
		separator
		for pkg in $(ls ${installed}); do
			. ${wok}/${pkg}/receip
			echo "$pkg $(indent 26 $VERSION) $(indent 42 $MAINTAINER)"
		done
		if [ "$installed_nb" == 0 ]; then
			gettext "No sup packages installed"; echo
		fi
		newline
		if [ -d "$wok" ]; then
			echo -n "$(colorize 35 $(gettext 'Sup packages in your wok:'))"
			boldify " $(ls ${wok} | wc -l)"
			separator
			for pkg in $(ls ${wok}); do
				. ${wok}/${pkg}/receip
				echo "$pkg $(indent 26 $VERSION) $(indent 42 $MAINTAINER)"
			done
			newline 
		fi ;;
	
	""|-h|help) help ;;
		
	*)
		# Display pkg info if installed
		pkg="$1"
		if [ -f "$installed/$pkg/receip" ]; then
			. ${installed}/${pkg}/receip
			newline
			gettext "Installed package:"; colorize 36 " $PACKAGE $VERSION"
			separator
			echo "Short desc: $SHORT_DESC"
			echo ""
			boldify "$(gettext 'Installed files:') ($sup_size)"
			cat ${installed}/${pkg}/files.list
			newline
		else
			gettext "Can't find installed package:"; colorize 31 " $pkg"
		fi ;;

esac && exit 0
